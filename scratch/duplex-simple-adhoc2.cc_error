/* -*-  Mode: C++; c-file-style: "gnu"; indent-tabs-mode:nil; -*- */
/*
 * Copyright (c) 2009 The Boeing Company
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

// 
// This script configures two nodes on an 802.11a physical layer, with
// 802.11a NICs in adhoc mode, and by default, sends one packet of 1000
// (application) bytes to the other node.  The physical layer is configured
// to receive at a fixed RSS (regardless of the distance and transmit
// power); therefore, changing position of the nodes has no effect. 
//
// There are a number of command-line options available to control
// the default behavior.  The list of available command-line options
// can be listed with the following command:
// ./waf --run "wifi-simple-adhoc --help"
//
// For instance, for this configuration, the physical layer will
// stop successy receiving packets when rss drops below -97 dBm.
// To see this effect, try running:
//
// ./waf --run "wifi-simple-adhoc --rss=-97 --numPackets=20"
// ./waf --run "wifi-simple-adhoc --rss=-98 --numPackets=20"
// ./waf --run "wifi-simple-adhoc --rss=-99 --numPackets=20"
//
// Note that all ns-3 attributes (not just the ones exposed in the below
// script) can be changed at command line; see the documentation.
//
// This script can also be helpful to put the Wifi layer into verbose
// logging mode; this command will turn on all wifi logging:
// 
// ./waf --run "wifi-simple-adhoc --verbose=1"
//
// When you are done, you will notice two pcap trace files in your directory.
// If you have tcpdump installed, you can try this:
//
// tcpdump -r wifi-simple-adhoc-0-0.pcap -nn -tt
//


#include "ns3/config-store-module.h"
#include "ns3/full-module.h"
#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/mobility-module.h"
#include "ns3/tools-module.h"
#include "ns3/internet-module.h"
#include "ns3/applications-module.h"
#include "ns3/flow-monitor-module.h"


#include <iostream>
#include <fstream>
#include <vector>
#include <string>

NS_LOG_COMPONENT_DEFINE ("FullSimpleAdhoc");

using namespace ns3;

uint32_t port = 9000;
uint32_t m_bytesTotal = 0;
Gnuplot2dDataset m_output;
uint32_t axis_x = 5;

void AdvancePosition (Ptr<Node> node) 
{
  double mbs = ((m_bytesTotal * 8.0) / 1000000);
  m_bytesTotal = 0;
  m_output.Add (axis_x, mbs);
  axis_x += 1.0;
  if (axis_x >= 210.0) 
    {
      return;
    }
  //std::cout << "x="<<pos.x << std::endl;
  Simulator::Schedule (Seconds (1.0), &AdvancePosition, node);
}

void ReceivePacket (Ptr<Socket> socket)
{
  Ptr<Packet> packet;
  while ((packet = socket->Recv ()))
    {
      m_bytesTotal += packet->GetSize ();
    }
}

void SetupPacketRecv (Ptr<Node> node)
{
  TypeId tid = TypeId::LookupByName ("ns3::PacketSocketFactory");
  Ptr<Socket> sink = Socket::CreateSocket (node, tid);
  sink->Bind ();
  sink->SetRecvCallback (MakeCallback (&ReceivePacket, this));
}

int main (int argc, char *argv[])
{

  LogComponentEnable("FullSimpleAdhoc", LogLevel(LOG_FUNCTION | LOG_ALL ) );

  std::string phyMode ("OfdmRate6Mbps");
  double rss = -80;  // -dBm
  uint32_t packetSize = 1000; // bytes
  bool verbose = false;

  double startTime = 1;
  double stopTime = 5;
  bool fullDuplex = true;
  bool captureEffect = false;
  bool returnPacket = false;
  bool secondaryPacket = false;
  bool busyTone = false;
  std::string uplinkRate = "6Mbps";
  std::string downlinkRate = "6Mbps";
  std::string mode;

  CommandLine cmd;
  cmd.AddValue ("phyMode", "Wifi Phy mode", phyMode);
  cmd.AddValue ("rss", "received signal strength", rss);
  cmd.AddValue ("packetSize", "size of application packet sent", packetSize);
  cmd.AddValue ("startTime", "start time", startTime);
  cmd.AddValue ("stopTime", "stop time", stopTime);
  cmd.AddValue ("verbose", "turn on all WifiNetDevice log components", verbose);
  cmd.AddValue ("fullDuplex", "enable full duplex (true) or half duplex (false)", fullDuplex);
  cmd.AddValue ("captureEffect", "enable capture effect in the PHY (true) or not (false)", captureEffect);
  cmd.AddValue ("returnPacket", "enable returnPacket (true) or not (false)", returnPacket);
  cmd.AddValue ("busyTone", "enable sending busytone (true) or not (false)", busyTone);
  cmd.AddValue ("secondaryPacket", "enable forwarding packet (true) or not (false)", secondaryPacket);
  cmd.AddValue("uplinkRate", "uplink data rate", uplinkRate);
  cmd.AddValue("downlinkRate", "downlink data rate", downlinkRate);


  cmd.Parse (argc, argv);
  // Convert to time object
//  Time interPacketInterval = Seconds (interval);

  NS_LOG_INFO ("packet size : " << packetSize);
  NS_LOG_INFO ("phyMode : " << phyMode);
  
  Gnuplot gnuplot = Gnuplot ("duplex_simple_adhoc2.png");
  Gnuplot2dDataset dataset;
  
  //m_output.SetStyle (Gnuplot2dDataset::LINES);

  mode = "full";
  NS_LOG_INFO ("full duplex mode");
  if ( captureEffect )
    {
      NS_LOG_INFO ("captureEffect : enabled.");
    }
  else
    {
      NS_LOG_INFO ("captureEffect : disabled.");
    }
  if ( returnPacket )
    {
      NS_LOG_INFO ("returnPacket : enabled.");
    }
  else
    {
      NS_LOG_INFO ("returnPacket : disabled.");
    }
  if ( secondaryPacket )
    {
      NS_LOG_INFO ("secondaryPacket : enabled.");
    }
  else
    {
      NS_LOG_INFO ("secondaryPacket : disabled.");
    }
  if (busyTone)
    {
      NS_LOG_INFO ("busyTone : enabled.");
    }
  else
    {
      NS_LOG_INFO ("busyTone : disabled.");
    }

  // disable fragmentation for frames below 2200 bytes
  Config::SetDefault ("ns3::FullWifiRemoteStationManager::FragmentationThreshold", StringValue ("2200"));
  // turn off RTS/CTS for frames below 2200 bytes
  Config::SetDefault ("ns3::FullWifiRemoteStationManager::RtsCtsThreshold", StringValue ("2200"));
  // Fix non-unicast data rate to be the same as that of unicast
  Config::SetDefault ("ns3::FullWifiRemoteStationManager::NonUnicastMode", StringValue (phyMode));

  NodeContainer c;
  c.Create (2);
  
  // The below set of helpers will help us to put together the wifi NICs we want
  FullWifiHelper wifi;
  if (verbose)
    {
      wifi.EnableLogComponents ();  // Turn on all Wifi logging
    }
  wifi.SetStandard (FULL_WIFI_PHY_STANDARD_80211a);

  FullYansWifiPhyHelper wifiPhy =  FullYansWifiPhyHelper::Default ();
  // This is one parameter that matters when using FixedRssLossModel
  // set it to zero; otherwise, gain will be added
  wifiPhy.Set ("RxGain", DoubleValue (0) );
  wifiPhy.Set ("EnableCaptureEffect", BooleanValue (captureEffect));
  // ns-3 supports RadioTap and Prism tracing extensions for 802.11b
  wifiPhy.SetPcapDataLinkType (FullYansWifiPhyHelper::DLT_IEEE802_11_RADIO);

  FullYansWifiChannelHelper wifiChannel;
  wifiChannel.SetPropagationDelay ("ns3::ConstantSpeedPropagationDelayModel");
  // The below FixedRssLossModel will cause the rss to be fixed regardless
  // of the distance between the two stations, and the transmit power
  wifiChannel.AddPropagationLoss ("ns3::FixedRssLossModel","Rss",DoubleValue (rss));
  wifiPhy.SetChannel (wifiChannel.Create ());

  // Add a non-QoS upper mac, and disable rate control
  FullNqosWifiMacHelper wifiMac = FullNqosWifiMacHelper::Default ();
  wifi.SetRemoteStationManager ("ns3::FullConstantRateWifiManager",
                                "DataMode",StringValue (phyMode),
                                "ControlMode",StringValue (phyMode));
  // Set it to adhoc mode
  wifiMac.SetType ("ns3::FullAdhocWifiMac");
  wifiMac.Set ("EnableReturnPacket", BooleanValue (returnPacket));
  wifiMac.Set ("EnableBusyTone", BooleanValue (busyTone));
  wifiMac.Set ("EnableForward", BooleanValue (secondaryPacket));

  NetDeviceContainer devices = wifi.Install (wifiPhy, wifiMac, c);

  // Tracing
  wifiPhy.EnablePcap ("full-wifi-simple-adhoc8", devices);

  // Note that with FixedRssLossModel, the positions below are not 
  // used for received signal strength. 
  MobilityHelper mobility;
  Ptr<ListPositionAllocator> positionAlloc = CreateObject<ListPositionAllocator> ();
  positionAlloc->Add (Vector (0.0, 0.0, 0.0));
  positionAlloc->Add (Vector (5.0, 0.0, 0.0));
  mobility.SetPositionAllocator (positionAlloc);
  mobility.SetMobilityModel ("ns3::ConstantPositionMobilityModel");
  mobility.Install (c);

  //InternetStackHelper internet;
  //internet.Install (c);
  PacketSocketHelper packetSocket;
  packetSocket.Install (c);

  //Ipv4AddressHelper ipv4;
  //NS_LOG_INFO ("Assign IP Addresses.");
  //ipv4.SetBase ("10.0.0.0", "255.255.255.0");
  //Ipv4InterfaceContainer i = ipv4.Assign (devices);

  //TypeId tid = TypeId::LookupByName ("ns3::UdpSocketFactory");
  //Ptr<Socket> recvSink = Socket::CreateSocket (c.Get (0), tid);
  //InetSocketAddress local = InetSocketAddress (Ipv4Address::GetAny (), 80);
  //recvSink->Bind (local);
  //recvSink->SetRecvCallback (MakeCallback (&ReceivePacket));

  //Ptr<Socket> source = Socket::CreateSocket (c.Get (1), tid);
  //InetSocketAddress remote = InetSocketAddress (Ipv4Address ("255.255.255.255"), 80);
  //source->SetAllowBroadcast (true);
  //source->Connect (remote);
  
  
  PacketSocketAddress socket0to1;
  socket0to1.SetSingleDevice (devices.Get (0)->GetIfIndex ());
  socket0to1.SetPhysicalAddress (devices.Get (1)->GetAddress ());
  socket0to1.SetProtocol (1);

  OnOffHelper onoff1 ("ns3::PacketSocketFactory", Address (socket0to1));
  onoff1.SetConstantRate (DataRate (uplinkRate));
  onoff1.SetAttribute ("PacketSize", UintegerValue (packetSize));

  ApplicationContainer apps1 = onoff1.Install (c.Get (0));
  apps1.Start (Seconds (startTime));
  apps1.Stop (Seconds (stopTime));
  
  PacketSocketAddress socket1to0;
  socket1to0.SetSingleDevice (devices.Get (1)->GetIfIndex ());
  socket1to0.SetPhysicalAddress (devices.Get (0)->GetAddress ());
  socket1to0.SetProtocol (1);

  OnOffHelper onoff2 ("ns3::PacketSocketFactory", Address (socket1to0));
  onoff2.SetConstantRate (DataRate (downlinkRate));
  onoff2.SetAttribute ("PacketSize", UintegerValue (packetSize));

  ApplicationContainer apps2 = onoff2.Install (c.Get (1));
  apps2.Start (Seconds (startTime));
  apps2.Stop (Seconds (stopTime));
  
  Simulator::Schedule (Seconds (startTime+1), &AdvancePosition, c.Get (1));
  Simulator::Schedule (Seconds (startTime+1), &AdvancePosition, c.Get (0));
  SetupPacketRecv (c.Get (0));
  SetupPacketRecv (c.Get (1));
  
  Simulator::Run ();
  Simulator::Destroy ();
  
  gnuplot.AddDataset(m_output);
  gnuplot.GenerateOutput (std::cout);

  return 0;
}

